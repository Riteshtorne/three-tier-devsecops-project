pipeline {
    agent any 
    tools {
        jdk 'jdk'
        nodejs 'nodejs'
    }
    environment  {
        SCANNER_HOME = tool 'sonar-scanner'
        AWS_ACCOUNT_ID = credentials('ACCOUNT-ID')
        AWS_ECR_REPO_NAME = credentials('ECR-REPO-BACKEND')
        AWS_DEFAULT_REGION = 'us-west-2'
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/"
    }
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout from Git') {
            steps {
                git branch: 'main', credentialsId: 'GITHUB', url: 'https://github.com/Riteshtorne/three-tier-devsecops-project.git'
            }
        }

        stage('Sonarqube Analysis') {
            steps {
                dir('app-code/backend') {
                    withSonarQubeEnv('sonar-server') {
                        withEnv([
                            'JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64',
                            'PATH+JAVA17=/usr/lib/jvm/java-17-openjdk-amd64/bin'
                        ]) {
                            sh ''' 
                                java -version
                                $SCANNER_HOME/bin/sonar-scanner \
                                  -Dsonar.projectKey=frontend \
                                  -Dsonar.sources=. \
                                  -Dsonar.host.url=http://52.25.127.97:9000 \
                                  -Dsonar.login=sqp_75578e5adf0fe59b818b19c646e1948f3cd94a50
                            '''
                        }
                    }
                }
            }
        }

        stage('Quality Check') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token' 
                }
            }
        }

        stage('OWASP Dependency-Check Scan') {
            steps {
                dir('app-code/backend') {
                    dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'dp-check'
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                }
            }
        }

        stage('Trivy File Scan') {
            steps {
                dir('app-code/backend') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }

        stage("Docker Image Build") {
            steps {
                dir('app-code/backend') {
                    sh 'docker system prune -f'
                    sh 'docker container prune -f'
                    sh 'docker build -t ${AWS_ECR_REPO_NAME} .'
                }
            }
        }

        stage("ECR Image Pushing") {
            steps {
                sh 'aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI}'
                sh 'docker tag ${AWS_ECR_REPO_NAME} ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}'
                sh 'docker push ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}'
            }
        }

        stage("TRIVY Image Scan") {
            steps {
                sh 'trivy image ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER} > trivyimage.txt' 
            }
        }

        stage('Checkout Code') {
            steps {
                git branch: 'main', credentialsId: 'GITHUB', url: 'https://github.com/Riteshtorne/three-tier-devsecops-project.git'
            }
        }

        stage('Update Deployment file') {
            environment {
                GIT_REPO_NAME = "three-tier-devsecops-project"
                GIT_USER_NAME = "Riteshtorne"
            }
            steps {
                dir('kubernetes-manifests/frontend') {
                    withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                        // First, list the files in the directory to check if deployment.yaml exists
                        sh '''
                            echo "Listing files in kubernetes-manifests/frontend directory:"
                            ls -l
                        '''
                        sh '''
                            git config user.email "torneritesh8@gmail.com"
                            git config user.name "Riteshtorne"
                            BUILD_NUMBER=${BUILD_NUMBER}
                            echo $BUILD_NUMBER
                            imageTag=$(grep -oP '(?<=frontend:)[^ ]+' deployment.yaml)
                            echo $imageTag
                            sed -i "s/${AWS_ECR_REPO_NAME}:${imageTag}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}/" deployment.yaml
                            git add deployment.yaml
                            git commit -m "Update deployment Image to version \${BUILD_NUMBER}"
                            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                        '''
                    }
                }
            }
        }
    }
